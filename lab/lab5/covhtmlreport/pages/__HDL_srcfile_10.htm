
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-a>timescale</q-w> 1<q-v>ns</q-w>/1<q-v>ps</q-w>
<a name="2"><q-n>     2  </q-n></a>
<a name="3"><q-n>     3  </q-n></a>`<q-i>include</q-w> <q-l>"param_def.v"</q-l>
<a name="4"><q-n>     4  </q-n></a>
<a name="5"><q-n>     5  </q-n></a><q-w>interface</q-w> chnl_intf(<q-w>input</q-w> clk, <q-w>input</q-w> rstn);
<a name="6"><q-n>     6  </q-n></a>  <q-w>logic</q-w> [31:0] ch_data;
<a name="7"><q-n>     7  </q-n></a>  <q-w>logic</q-w>        ch_valid;
<a name="8"><q-n>     8  </q-n></a>  <q-w>logic</q-w>        ch_ready;
<a name="9"><q-n>     9  </q-n></a>  <q-w>clocking</q-w> drv_ck @(<q-a>posedge</q-w> clk);
<a name="10"><q-n>     10  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="11"><q-n>     11  </q-n></a>    <q-w>output</q-w> ch_data, ch_valid;
<a name="12"><q-n>     12  </q-n></a>    <q-w>input</q-w> ch_ready;
<a name="13"><q-n>     13  </q-n></a>  <q-w>endclocking</q-w>
<a name="14"><q-n>     14  </q-n></a>  <q-w>clocking</q-w> mon_ck @(<q-a>posedge</q-w> clk);
<a name="15"><q-n>     15  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="16"><q-n>     16  </q-n></a>    <q-w>input</q-w> ch_data, ch_valid, ch_ready;
<a name="17"><q-n>     17  </q-n></a>  <q-w>endclocking</q-w>
<a name="18"><q-n>     18  </q-n></a><q-w>endinterface</q-w>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a><q-w>interface</q-w> reg_intf(<q-w>input</q-w> clk, <q-w>input</q-w> rstn);
<a name="21"><q-n>     21  </q-n></a>  <q-w>logic</q-w> [1:0]                 cmd;
<a name="22"><q-n>     22  </q-n></a>  <q-w>logic</q-w> [`ADDR_WIDTH-1:0]     cmd_addr;
<a name="23"><q-n>     23  </q-n></a>  <q-w>logic</q-w> [`CMD_DATA_WIDTH-1:0] cmd_data_s2m;
<a name="24"><q-n>     24  </q-n></a>  <q-w>logic</q-w> [`CMD_DATA_WIDTH-1:0] cmd_data_m2s;
<a name="25"><q-n>     25  </q-n></a>  <q-w>clocking</q-w> drv_ck @(<q-a>posedge</q-w> clk);
<a name="26"><q-n>     26  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="27"><q-n>     27  </q-n></a>    <q-w>output</q-w> cmd, cmd_addr, cmd_data_m2s;
<a name="28"><q-n>     28  </q-n></a>    <q-w>input</q-w> cmd_data_s2m;
<a name="29"><q-n>     29  </q-n></a>  <q-w>endclocking</q-w>
<a name="30"><q-n>     30  </q-n></a>  <q-w>clocking</q-w> mon_ck @(<q-a>posedge</q-w> clk);
<a name="31"><q-n>     31  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="32"><q-n>     32  </q-n></a>    <q-w>input</q-w> cmd, cmd_addr, cmd_data_m2s, cmd_data_s2m;
<a name="33"><q-n>     33  </q-n></a>  <q-w>endclocking</q-w>
<a name="34"><q-n>     34  </q-n></a><q-w>endinterface</q-w>
<a name="35"><q-n>     35  </q-n></a>
<a name="36"><q-n>     36  </q-n></a><q-w>interface</q-w> arb_intf(<q-w>input</q-w> clk, <q-w>input</q-w> rstn);
<a name="37"><q-n>     37  </q-n></a>  <q-w>logic</q-w> [1:0] slv_prios[3];
<a name="38"><q-n>     38  </q-n></a>  <q-w>logic</q-w> slv_reqs[3];
<a name="39"><q-n>     39  </q-n></a>  <q-w>logic</q-w> a2s_acks[3];
<a name="40"><q-n>     40  </q-n></a>  <q-w>logic</q-w> f2a_id_req;
<a name="41"><q-n>     41  </q-n></a>  <q-w>clocking</q-w> mon_ck @(<q-a>posedge</q-w> clk);
<a name="42"><q-n>     42  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="43"><q-n>     43  </q-n></a>    <q-w>input</q-w> slv_prios, slv_reqs, a2s_acks, f2a_id_req;
<a name="44"><q-n>     44  </q-n></a>  <q-w>endclocking</q-w>
<a name="45"><q-n>     45  </q-n></a><q-w>endinterface</q-w>
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a><q-w>interface</q-w> fmt_intf(<q-w>input</q-w> clk, <q-w>input</q-w> rstn);
<a name="48"><q-n>     48  </q-n></a>  <q-w>logic</q-w>        fmt_grant;
<a name="49"><q-n>     49  </q-n></a>  <q-w>logic</q-w> [1:0]  fmt_chid;
<a name="50"><q-n>     50  </q-n></a>  <q-w>logic</q-w>        fmt_req;
<a name="51"><q-n>     51  </q-n></a>  <q-w>logic</q-w> [5:0]  fmt_length;
<a name="52"><q-n>     52  </q-n></a>  <q-w>logic</q-w> [31:0] fmt_data;
<a name="53"><q-n>     53  </q-n></a>  <q-w>logic</q-w>        fmt_start;
<a name="54"><q-n>     54  </q-n></a>  <q-w>logic</q-w>        fmt_end;
<a name="55"><q-n>     55  </q-n></a>  <q-w>clocking</q-w> drv_ck @(<q-a>posedge</q-w> clk);
<a name="56"><q-n>     56  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="57"><q-n>     57  </q-n></a>    <q-w>input</q-w> fmt_chid, fmt_req, fmt_length, fmt_data, fmt_start;
<a name="58"><q-n>     58  </q-n></a>    <q-w>output</q-w> fmt_grant;
<a name="59"><q-n>     59  </q-n></a>  <q-w>endclocking</q-w>
<a name="60"><q-n>     60  </q-n></a>  <q-w>clocking</q-w> mon_ck @(<q-a>posedge</q-w> clk);
<a name="61"><q-n>     61  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="62"><q-n>     62  </q-n></a>    <q-w>input</q-w> fmt_grant, fmt_chid, fmt_req, fmt_length, fmt_data, fmt_start;
<a name="63"><q-n>     63  </q-n></a>  <q-w>endclocking</q-w>
<a name="64"><q-n>     64  </q-n></a><q-w>endinterface</q-w>
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a><q-w>interface</q-w> mcdf_intf(<q-w>input</q-w> clk, <q-w>input</q-w> rstn);
<a name="67"><q-n>     67  </q-n></a>  <q-m>// USER TODO</q-m>
<a name="68"><q-n>     68  </q-n></a>  <q-m>// To define those signals which do not exsit in</q-m>
<a name="69"><q-n>     69  </q-n></a>  <q-m>// reg_if, chnl_if, arb_if or fmt_if</q-m>
<a name="70"><q-n>     70  </q-n></a>  <q-w>logic</q-w> chnl_en[3];
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>
<a name="73"><q-n>     73  </q-n></a>  <q-w>clocking</q-w> mon_ck @(<q-a>posedge</q-w> clk);
<a name="74"><q-n>     74  </q-n></a>    <q-w>default</q-w> <q-w>input</q-w> #1<q-v>ns</q-w> <q-w>output</q-w> #1<q-v>ns</q-w>;
<a name="75"><q-n>     75  </q-n></a>    <q-w>input</q-w> chnl_en;
<a name="76"><q-n>     76  </q-n></a>  <q-w>endclocking</q-w>
<a name="77"><q-n>     77  </q-n></a><q-w>endinterface</q-w>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a><q-w>module</q-w> tb;
<a name="80"><q-n>     80  </q-n></a>  <q-w>logic</q-w>         clk;
<a name="81"><q-n>     81  </q-n></a>  <q-w>logic</q-w>         rstn;
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a>  mcdf dut(
<a name="84"><q-n>     84  </q-n></a>     .clk_i       (clk                )
<a name="85"><q-n>     85  </q-n></a>    ,.rstn_i      (rstn               )
<a name="86"><q-n>     86  </q-n></a>    ,.cmd_i       (reg_if.cmd         ) 
<a name="87"><q-n>     87  </q-n></a>    ,.cmd_addr_i  (reg_if.cmd_addr    ) 
<a name="88"><q-n>     88  </q-n></a>    ,.cmd_data_i  (reg_if.cmd_data_m2s)  
<a name="89"><q-n>     89  </q-n></a>    ,.cmd_data_o  (reg_if.cmd_data_s2m)  
<a name="90"><q-n>     90  </q-n></a>    ,.ch0_data_i  (chnl0_if.ch_data   )
<a name="91"><q-n>     91  </q-n></a>    ,.ch0_vld_i   (chnl0_if.ch_valid  )
<a name="92"><q-n>     92  </q-n></a>    ,.ch0_ready_o (chnl0_if.ch_ready  )
<a name="93"><q-n>     93  </q-n></a>    ,.ch1_data_i  (chnl1_if.ch_data   )
<a name="94"><q-n>     94  </q-n></a>    ,.ch1_vld_i   (chnl1_if.ch_valid  )
<a name="95"><q-n>     95  </q-n></a>    ,.ch1_ready_o (chnl1_if.ch_ready  )
<a name="96"><q-n>     96  </q-n></a>    ,.ch2_data_i  (chnl2_if.ch_data   )
<a name="97"><q-n>     97  </q-n></a>    ,.ch2_vld_i   (chnl2_if.ch_valid  )
<a name="98"><q-n>     98  </q-n></a>    ,.ch2_ready_o (chnl2_if.ch_ready  )
<a name="99"><q-n>     99  </q-n></a>    ,.fmt_grant_i (fmt_if.fmt_grant   ) 
<a name="100"><q-n>     100  </q-n></a>    ,.fmt_chid_o  (fmt_if.fmt_chid    ) 
<a name="101"><q-n>     101  </q-n></a>    ,.fmt_req_o   (fmt_if.fmt_req     ) 
<a name="102"><q-n>     102  </q-n></a>    ,.fmt_length_o(fmt_if.fmt_length  )    
<a name="103"><q-n>     103  </q-n></a>    ,.fmt_data_o  (fmt_if.fmt_data    )  
<a name="104"><q-n>     104  </q-n></a>    ,.fmt_start_o (fmt_if.fmt_start   )  
<a name="105"><q-n>     105  </q-n></a>    ,.fmt_end_o   (fmt_if.fmt_end     )  
<a name="106"><q-n>     106  </q-n></a>  );
<a name="107"><q-n>     107  </q-n></a>  
<a name="108"><q-n>     108  </q-n></a>  <q-m>// clock generation</q-m>
<a name="109"><q-n>     109  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w> 
<a name="110"><q-n>     110  </q-n></a>    clk &lt;= 0;
<a name="111"><q-n>     111  </q-n></a>    <q-w>forever</q-w> <q-w>begin</q-w>
<a name="112"><q-n>     112  </q-n></a>      #5 clk &lt;= !clk;
<a name="113"><q-n>     113  </q-n></a>    <q-w>end</q-w>
<a name="114"><q-n>     114  </q-n></a>  <q-w>end</q-w>
<a name="115"><q-n>     115  </q-n></a>  
<a name="116"><q-n>     116  </q-n></a>  <q-m>// reset trigger</q-m>
<a name="117"><q-n>     117  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w> 
<a name="118"><q-n>     118  </q-n></a>    #10 rstn &lt;= 0;
<a name="119"><q-n>     119  </q-n></a>    <q-w>repeat</q-w>(10) @(<q-a>posedge</q-w> clk);
<a name="120"><q-n>     120  </q-n></a>    rstn &lt;= 1;
<a name="121"><q-n>     121  </q-n></a>  <q-w>end</q-w>
<a name="122"><q-n>     122  </q-n></a>
<a name="123"><q-n>     123  </q-n></a>  <q-w>import</q-w> chnl_pkg::*;
<a name="124"><q-n>     124  </q-n></a>  <q-w>import</q-w> reg_pkg::*;
<a name="125"><q-n>     125  </q-n></a>  <q-w>import</q-w> arb_pkg::*;
<a name="126"><q-n>     126  </q-n></a>  <q-w>import</q-w> fmt_pkg::*;
<a name="127"><q-n>     127  </q-n></a>  <q-w>import</q-w> mcdf_pkg::*;
<a name="128"><q-n>     128  </q-n></a>
<a name="129"><q-n>     129  </q-n></a>  reg_intf  reg_if(.*);
<a name="130"><q-n>     130  </q-n></a>  chnl_intf chnl0_if(.*);
<a name="131"><q-n>     131  </q-n></a>  chnl_intf chnl1_if(.*);
<a name="132"><q-n>     132  </q-n></a>  chnl_intf chnl2_if(.*);
<a name="133"><q-n>     133  </q-n></a>  arb_intf  arb_if(.*);
<a name="134"><q-n>     134  </q-n></a>  fmt_intf  fmt_if(.*);
<a name="135"><q-n>     135  </q-n></a>  mcdf_intf mcdf_if(.*);
<a name="136"><q-n>     136  </q-n></a>
<a name="137"><q-n>     137  </q-n></a>  <q-m>// mcdf interface monitoring MCDF ports and signals</q-m>
<a name="138"><q-n>     138  </q-n></a>  <q-w>assign</q-w> mcdf_if.chnl_en[0] = tb.dut.ctrl_regs_inst.slv0_en_o;
<a name="139"><q-n>     139  </q-n></a>  <q-w>assign</q-w> mcdf_if.chnl_en[1] = tb.dut.ctrl_regs_inst.slv1_en_o;
<a name="140"><q-n>     140  </q-n></a>  <q-w>assign</q-w> mcdf_if.chnl_en[2] = tb.dut.ctrl_regs_inst.slv2_en_o;
<a name="141"><q-n>     141  </q-n></a>
<a name="142"><q-n>     142  </q-n></a>  <q-m>// arbiter interface monitoring arbiter ports</q-m>
<a name="143"><q-n>     143  </q-n></a>  <q-w>assign</q-w> arb_if.slv_prios[0] = tb.dut.arbiter_inst.slv0_prio_i;
<a name="144"><q-n>     144  </q-n></a>  <q-w>assign</q-w> arb_if.slv_prios[1] = tb.dut.arbiter_inst.slv1_prio_i;
<a name="145"><q-n>     145  </q-n></a>  <q-w>assign</q-w> arb_if.slv_prios[2] = tb.dut.arbiter_inst.slv2_prio_i;
<a name="146"><q-n>     146  </q-n></a>  <q-w>assign</q-w> arb_if.slv_reqs[0] = tb.dut.arbiter_inst.slv0_req_i;
<a name="147"><q-n>     147  </q-n></a>  <q-w>assign</q-w> arb_if.slv_reqs[1] = tb.dut.arbiter_inst.slv1_req_i;
<a name="148"><q-n>     148  </q-n></a>  <q-w>assign</q-w> arb_if.slv_reqs[2] = tb.dut.arbiter_inst.slv2_req_i;
<a name="149"><q-n>     149  </q-n></a>  <q-w>assign</q-w> arb_if.a2s_acks[0] = tb.dut.arbiter_inst.a2s0_ack_o;
<a name="150"><q-n>     150  </q-n></a>  <q-w>assign</q-w> arb_if.a2s_acks[1] = tb.dut.arbiter_inst.a2s1_ack_o;
<a name="151"><q-n>     151  </q-n></a>  <q-w>assign</q-w> arb_if.a2s_acks[2] = tb.dut.arbiter_inst.a2s2_ack_o;
<a name="152"><q-n>     152  </q-n></a>  <q-w>assign</q-w> arb_if.f2a_id_req = tb.dut.arbiter_inst.f2a_id_req_i;
<a name="153"><q-n>     153  </q-n></a>
<a name="154"><q-n>     154  </q-n></a>  mcdf_data_consistence_basic_test t1;
<a name="155"><q-n>     155  </q-n></a>  mcdf_full_random_test t2;
<a name="156"><q-n>     156  </q-n></a>  mcdf_channel_disable_test t3;
<a name="157"><q-n>     157  </q-n></a>  mcdf_reg_write_read_test t4;
<a name="158"><q-n>     158  </q-n></a>  mcdf_reg_illegal_access_test t5;
<a name="159"><q-n>     159  </q-n></a>  mcdf_abiter_priority_same_test t6;
<a name="160"><q-n>     160  </q-n></a>  mcdf_abiter_priority_diff_test t7;
<a name="161"><q-n>     161  </q-n></a>  mcdf_formatter_length_test t8;
<a name="162"><q-n>     162  </q-n></a>  mcdf_formatter_grant_test t9;
<a name="163"><q-n>     163  </q-n></a>  mcdf_base_test tests[<q-w>string</q-w>];
<a name="164"><q-n>     164  </q-n></a>  <q-w>string</q-w> name;
<a name="165"><q-n>     165  </q-n></a>
<a name="166"><q-n>     166  </q-n></a>  <q-w>initial</q-w> <q-w>begin</q-w> 
<a name="167"><q-n>     167  </q-n></a>    t1 = <q-w>new</q-w>();
<a name="168"><q-n>     168  </q-n></a>    t2 = <q-w>new</q-w>();
<a name="169"><q-n>     169  </q-n></a>	t3 = <q-w>new</q-w>();
<a name="170"><q-n>     170  </q-n></a>	t4 = <q-w>new</q-w>();
<a name="171"><q-n>     171  </q-n></a>	t5 = <q-w>new</q-w>();
<a name="172"><q-n>     172  </q-n></a>	t6 = <q-w>new</q-w>();
<a name="173"><q-n>     173  </q-n></a>	t7 = <q-w>new</q-w>();
<a name="174"><q-n>     174  </q-n></a>	t8 = <q-w>new</q-w>();
<a name="175"><q-n>     175  </q-n></a>	t9 = <q-w>new</q-w>();
<a name="176"><q-n>     176  </q-n></a>    tests[<q-l>"mcdf_data_consistence_basic_test"</q-l>] = t1;
<a name="177"><q-n>     177  </q-n></a>    tests[<q-l>"mcdf_full_random_test"</q-l>] = t2;
<a name="178"><q-n>     178  </q-n></a>	tests[<q-l>"mcdf_channel_disable_test"</q-l>] = t3;
<a name="179"><q-n>     179  </q-n></a>	tests[<q-l>"mcdf_reg_write_read_test"</q-l>] = t4;
<a name="180"><q-n>     180  </q-n></a>	tests[<q-l>"mcdf_reg_illegal_access_test"</q-l>] = t5;
<a name="181"><q-n>     181  </q-n></a>	tests[<q-l>"mcdf_abiter_priority_same_test"</q-l>] = t6;
<a name="182"><q-n>     182  </q-n></a>	tests[<q-l>"mcdf_abiter_priority_diff_test"</q-l>] = t7;
<a name="183"><q-n>     183  </q-n></a>	tests[<q-l>"mcdf_formatter_length_test"</q-l>] = t8;
<a name="184"><q-n>     184  </q-n></a>	tests[<q-l>"mcdf_formatter_grant_test"</q-l>] = t9;
<a name="185"><q-n>     185  </q-n></a>	
<a name="186"><q-n>     186  </q-n></a>    <q-w>if</q-w>($value$plusargs(<q-l>"TESTNAME=%s"</q-l>, name)) <q-w>begin</q-w>
<a name="187"><q-n>     187  </q-n></a>      <q-w>if</q-w>(tests.exists(name)) <q-w>begin</q-w>
<a name="188"><q-n>     188  </q-n></a>        tests[name].set_interface(chnl0_if, chnl1_if, chnl2_if, reg_if, arb_if, fmt_if, mcdf_if);
<a name="189"><q-n>     189  </q-n></a>        tests[name].run();
<a name="190"><q-n>     190  </q-n></a>      <q-w>end</q-w>
<a name="191"><q-n>     191  </q-n></a>      <q-w>else</q-w> <q-w>begin</q-w>
<a name="192"><q-n>     192  </q-n></a>        $fatal($sformatf(<q-l>"[ERRTEST], test name %s is invalid, please specify a valid name!"</q-l>, name));
<a name="193"><q-n>     193  </q-n></a>      <q-w>end</q-w>
<a name="194"><q-n>     194  </q-n></a>    <q-w>end</q-w>
<a name="195"><q-n>     195  </q-n></a>    <q-w>else</q-w> <q-w>begin</q-w>
<a name="196"><q-n>     196  </q-n></a>      $display(<q-l>"NO runtime optiont +TESTNAME=xxx is configured, and run default test mcdf_data_consistence_basic_test"</q-l>);
<a name="197"><q-n>     197  </q-n></a>      tests[<q-l>"mcdf_data_consistence_basic_test"</q-l>].set_interface(chnl0_if, chnl1_if, chnl2_if, reg_if, arb_if, fmt_if, mcdf_if);
<a name="198"><q-n>     198  </q-n></a>      tests[<q-l>"mcdf_data_consistence_basic_test"</q-l>].run();
<a name="199"><q-n>     199  </q-n></a>    <q-w>end</q-w>
<a name="200"><q-n>     200  </q-n></a>  <q-w>end</q-w>
<a name="201"><q-n>     201  </q-n></a><q-w>endmodule</q-w>
<a name="202"><q-n>     202  </q-n></a>
</pre>
</tt>

  
</body>
</html>
