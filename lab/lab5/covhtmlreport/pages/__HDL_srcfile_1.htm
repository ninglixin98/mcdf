
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>//------------------------------------------------------------------------------------------------------------------------//</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>//change log 2017-08-20 fix read pointer and write pointer </q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>//------------------------------------------------------------------------------------------------------------------------//</q-m>
<a name="4"><q-n>     4  </q-n></a><q-w>module</q-w> slave_fifo (
<a name="5"><q-n>     5  </q-n></a><q-w>input</q-w>                       clk_i,                  <q-m>// Clock input </q-m>
<a name="6"><q-n>     6  </q-n></a><q-w>input</q-w>                       rstn_i,                 <q-m>// low level effective </q-m>
<a name="7"><q-n>     7  </q-n></a><q-w>input</q-w> [31:0]                chx_data_i,             <q-m>// Data input                 ----&gt;From outside</q-m>
<a name="8"><q-n>     8  </q-n></a><q-w>input</q-w>                       a2sx_ack_i,             <q-m>// Read ack                   ----&gt;From Arbiter</q-m>
<a name="9"><q-n>     9  </q-n></a><q-w>input</q-w>                       slvx_en_i,              <q-m>// Write enable To Registers  ----&gt;To Register</q-m>
<a name="10"><q-n>     10  </q-n></a><q-w>input</q-w>                       chx_valid_i,            <q-m>// Data is valid From outside ----&gt;From Outside</q-m>
<a name="11"><q-n>     11  </q-n></a><q-w>output</q-w> <q-w>reg</q-w> [31:0]           slvx_data_o,            <q-m>// Data Output                ----&gt;To Arbiter</q-m>
<a name="12"><q-n>     12  </q-n></a><q-w>output</q-w> [5:0]                margin_o,               <q-m>// Data margin                ----&gt;To Registers</q-m>
<a name="13"><q-n>     13  </q-n></a><q-w>output</q-w> <q-w>reg</q-w>                  chx_ready_o,            <q-m>// Ready to accept data       ----&gt;To outside</q-m>
<a name="14"><q-n>     14  </q-n></a><q-w>output</q-w> <q-w>reg</q-w>                  slvx_val_o,             <q-m>// read acknowledge Keep to handshake with Arbiter ----&gt; To Arbiter</q-m>
<a name="15"><q-n>     15  </q-n></a><q-w>output</q-w> <q-w>reg</q-w>                  slvx_req_o 
<a name="16"><q-n>     16  </q-n></a>);     
<a name="17"><q-n>     17  </q-n></a><q-m>//------------------------------Internal variables-------------------//</q-m>
<a name="18"><q-n>     18  </q-n></a><q-w>reg</q-w> [5:0] wr_pointer_r;
<a name="19"><q-n>     19  </q-n></a><q-w>reg</q-w> [5:0] rd_pointer_r;
<a name="20"><q-n>     20  </q-n></a><q-w>reg</q-w> [31:0] mem [0:31]; <q-m>//FIFO 32bits width and 32 deepth</q-m>
<a name="21"><q-n>     21  </q-n></a><q-m>//-----------------------------Variable assignments------------------//</q-m>
<a name="22"><q-n>     22  </q-n></a><q-w>wire</q-w> full_s, empty_s, rd_en_s ;
<a name="23"><q-n>     23  </q-n></a><q-w>wire</q-w> [5:0] data_cnt_s;
<a name="24"><q-n>     24  </q-n></a><q-w>assign</q-w> full_s = ({~wr_pointer_r[5],wr_pointer_r[4:0]}==rd_pointer_r);
<a name="25"><q-n>     25  </q-n></a><q-w>assign</q-w> empty_s = (wr_pointer_r == rd_pointer_r);
<a name="26"><q-n>     26  </q-n></a><q-w>assign</q-w> data_cnt_s = (6'd32 - (wr_pointer_r - rd_pointer_r));
<a name="27"><q-n>     27  </q-n></a><q-w>assign</q-w> margin_o = data_cnt_s;
<a name="28"><q-n>     28  </q-n></a><q-w>assign</q-w> rd_en_s = a2sx_ack_i;
<a name="29"><q-n>     29  </q-n></a>
<a name="30"><q-n>     30  </q-n></a><q-m>//-----------Code Start---------------------------------------------//</q-m>
<a name="31"><q-n>     31  </q-n></a><q-w>always</q-w> @ (*) <q-m>//ready signal</q-m>
<a name="32"><q-n>     32  </q-n></a><q-w>begin</q-w>
<a name="33"><q-n>     33  </q-n></a><q-w>if</q-w> (!full_s &amp;&amp; slvx_en_i) chx_ready_o = 1'b1;<q-m>//If FIFO is not full and also enabled it is ready to accept data</q-m>
<a name="34"><q-n>     34  </q-n></a><q-w>else</q-w> chx_ready_o = 1'b0;
<a name="35"><q-n>     35  </q-n></a><q-w>end</q-w>
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a><q-w>always</q-w> @ (*) <q-m>//reset signal</q-m>
<a name="38"><q-n>     38  </q-n></a><q-w>begin</q-w> 
<a name="39"><q-n>     39  </q-n></a>  <q-w>if</q-w> (!rstn_i) slvx_req_o = 1'b0;
<a name="40"><q-n>     40  </q-n></a>  <q-w>else</q-w> <q-w>if</q-w> (!empty_s) slvx_req_o = 1'b1;
<a name="41"><q-n>     41  </q-n></a>  <q-w>else</q-w> slvx_req_o = 1'b0;
<a name="42"><q-n>     42  </q-n></a><q-w>end</q-w> 
<a name="43"><q-n>     43  </q-n></a>
<a name="44"><q-n>     44  </q-n></a><q-m>//write pointer increment</q-m>
<a name="45"><q-n>     45  </q-n></a><q-w>always</q-w> @ (<q-a>posedge</q-w> clk_i <q-t>or</q-w> <q-a>negedge</q-w> rstn_i)
<a name="46"><q-n>     46  </q-n></a><q-w>begin</q-w> : WRITE_POINTER
<a name="47"><q-n>     47  </q-n></a>  <q-w>if</q-w> (!rstn_i) <q-w>begin</q-w>
<a name="48"><q-n>     48  </q-n></a>    wr_pointer_r &lt;= 6'b0000;
<a name="49"><q-n>     49  </q-n></a>  <q-w>end</q-w> <q-w>else</q-w> 
<a name="50"><q-n>     50  </q-n></a>  <q-w>if</q-w> (chx_valid_i &amp;&amp; chx_ready_o) <q-w>begin</q-w>
<a name="51"><q-n>     51  </q-n></a>    wr_pointer_r &lt;= wr_pointer_r + 6'b0001;
<a name="52"><q-n>     52  </q-n></a>  <q-w>end</q-w>
<a name="53"><q-n>     53  </q-n></a><q-w>end</q-w>
<a name="54"><q-n>     54  </q-n></a>
<a name="55"><q-n>     55  </q-n></a><q-m>//read pointer increment</q-m>
<a name="56"><q-n>     56  </q-n></a><q-w>always</q-w> @ (<q-a>posedge</q-w> clk_i <q-t>or</q-w> <q-a>negedge</q-w> rstn_i)
<a name="57"><q-n>     57  </q-n></a><q-w>begin</q-w> : READ_POINTER
<a name="58"><q-n>     58  </q-n></a>  <q-w>if</q-w> (!rstn_i) <q-w>begin</q-w>
<a name="59"><q-n>     59  </q-n></a>    rd_pointer_r &lt;= 6'b0000;
<a name="60"><q-n>     60  </q-n></a>  <q-w>end</q-w> <q-w>else</q-w> 
<a name="61"><q-n>     61  </q-n></a>  <q-w>if</q-w> (rd_en_s &amp;&amp; (!empty_s)) <q-w>begin</q-w>
<a name="62"><q-n>     62  </q-n></a>    rd_pointer_r &lt;= rd_pointer_r + 6'b0001;
<a name="63"><q-n>     63  </q-n></a>  <q-w>end</q-w>
<a name="64"><q-n>     64  </q-n></a><q-w>end</q-w>
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a><q-m>//data output is vaild </q-m>
<a name="67"><q-n>     67  </q-n></a><q-w>always</q-w> @ (<q-a>posedge</q-w> clk_i <q-t>or</q-w> <q-a>negedge</q-w> rstn_i)
<a name="68"><q-n>     68  </q-n></a><q-w>begin</q-w>
<a name="69"><q-n>     69  </q-n></a>  <q-w>if</q-w> (!rstn_i) slvx_val_o &lt;= 1'b0;
<a name="70"><q-n>     70  </q-n></a>  <q-w>else</q-w> <q-w>if</q-w> (rd_en_s &amp;&amp; (!empty_s))
<a name="71"><q-n>     71  </q-n></a>    slvx_val_o &lt;= 1'b1;
<a name="72"><q-n>     72  </q-n></a>    <q-w>else</q-w> slvx_val_o &lt;= 1'b0;
<a name="73"><q-n>     73  </q-n></a><q-w>end</q-w> 
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a><q-m>// Memory Read Block </q-m>
<a name="76"><q-n>     76  </q-n></a><q-w>always</q-w>  @ (<q-a>posedge</q-w> clk_i )
<a name="77"><q-n>     77  </q-n></a><q-w>begin</q-w> : READ_DATA 
<a name="78"><q-n>     78  </q-n></a>  <q-w>if</q-w> (rstn_i &amp;&amp; rd_en_s &amp;&amp; (!empty_s)) <q-w>begin</q-w>
<a name="79"><q-n>     79  </q-n></a>    slvx_data_o &lt;= mem[rd_pointer_r[4:0]];
<a name="80"><q-n>     80  </q-n></a>  <q-w>end</q-w>
<a name="81"><q-n>     81  </q-n></a><q-w>end</q-w>
<a name="82"><q-n>     82  </q-n></a>
<a name="83"><q-n>     83  </q-n></a><q-m>// Memory Write Block </q-m>
<a name="84"><q-n>     84  </q-n></a><q-w>always</q-w> @ (<q-a>posedge</q-w> clk_i)
<a name="85"><q-n>     85  </q-n></a><q-w>begin</q-w> : MEM_WRITE
<a name="86"><q-n>     86  </q-n></a>	<q-w>if</q-w> (rstn_i &amp;&amp; chx_valid_i &amp;&amp; chx_ready_o &amp;&amp; slvx_en_i) <q-w>begin</q-w>
<a name="87"><q-n>     87  </q-n></a>	  mem[wr_pointer_r[4:0]] &lt;= chx_data_i;
<a name="88"><q-n>     88  </q-n></a>	 <q-w>end</q-w>
<a name="89"><q-n>     89  </q-n></a><q-w>end</q-w>
<a name="90"><q-n>     90  </q-n></a>
<a name="91"><q-n>     91  </q-n></a><q-w>endmodule</q-w> 
</pre>
</tt>

  
</body>
</html>
