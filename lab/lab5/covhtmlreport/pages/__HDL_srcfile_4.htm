
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-w>package</q-w> chnl_pkg;
<a name="2"><q-n>     2  </q-n></a>  <q-w>class</q-w> chnl_trans;
<a name="3"><q-n>     3  </q-n></a>    <q-w>rand</q-w> <q-w>bit</q-w>[31:0] data[];
<a name="4"><q-n>     4  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> ch_id;
<a name="5"><q-n>     5  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> pkt_id;
<a name="6"><q-n>     6  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> data_nidles;
<a name="7"><q-n>     7  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> pkt_nidles;
<a name="8"><q-n>     8  </q-n></a>    <q-w>bit</q-w> rsp;
<a name="9"><q-n>     9  </q-n></a>    <q-w>constraint</q-w> cstr{
<a name="10"><q-n>     10  </q-n></a>      soft data.size <q-w>inside</q-w> {[4:32]};
<a name="11"><q-n>     11  </q-n></a>      <q-w>foreach</q-w>(data[i]) data[i] == 'hC000_0000 + (<q-w>this</q-w>.ch_id&lt;&lt;24) + (<q-w>this</q-w>.pkt_id&lt;&lt;8) + i;
<a name="12"><q-n>     12  </q-n></a>      soft ch_id == 0;
<a name="13"><q-n>     13  </q-n></a>      soft pkt_id == 0;
<a name="14"><q-n>     14  </q-n></a>      soft data_nidles <q-w>inside</q-w> {[0:2]};
<a name="15"><q-n>     15  </q-n></a>      soft pkt_nidles <q-w>inside</q-w> {[1:10]};
<a name="16"><q-n>     16  </q-n></a>    };
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>    <q-w>function</q-w> chnl_trans clone();
<a name="19"><q-n>     19  </q-n></a>      chnl_trans c = <q-w>new</q-w>();
<a name="20"><q-n>     20  </q-n></a>      c.data = <q-w>this</q-w>.data;
<a name="21"><q-n>     21  </q-n></a>      c.ch_id = <q-w>this</q-w>.ch_id;
<a name="22"><q-n>     22  </q-n></a>      c.pkt_id = <q-w>this</q-w>.pkt_id;
<a name="23"><q-n>     23  </q-n></a>      c.data_nidles = <q-w>this</q-w>.data_nidles;
<a name="24"><q-n>     24  </q-n></a>      c.pkt_nidles = <q-w>this</q-w>.pkt_nidles;
<a name="25"><q-n>     25  </q-n></a>      c.rsp = <q-w>this</q-w>.rsp;
<a name="26"><q-n>     26  </q-n></a>      <q-w>return</q-w> c;
<a name="27"><q-n>     27  </q-n></a>    <q-w>endfunction</q-w>
<a name="28"><q-n>     28  </q-n></a>
<a name="29"><q-n>     29  </q-n></a>    <q-w>function</q-w> <q-w>string</q-w> sprint();
<a name="30"><q-n>     30  </q-n></a>      <q-w>string</q-w> s;
<a name="31"><q-n>     31  </q-n></a>      s = {s, $sformatf(<q-l>"=======================================\n"</q-l>)};
<a name="32"><q-n>     32  </q-n></a>      s = {s, $sformatf(<q-l>"chnl_trans object content is as below: \n"</q-l>)};
<a name="33"><q-n>     33  </q-n></a>      <q-w>foreach</q-w>(data[i]) s = {s, $sformatf(<q-l>"data[%0d] = %8x \n"</q-l>, i, <q-w>this</q-w>.data[i])};
<a name="34"><q-n>     34  </q-n></a>      s = {s, $sformatf(<q-l>"ch_id = %0d: \n"</q-l>, <q-w>this</q-w>.ch_id)};
<a name="35"><q-n>     35  </q-n></a>      s = {s, $sformatf(<q-l>"pkt_id = %0d: \n"</q-l>, <q-w>this</q-w>.pkt_id)};
<a name="36"><q-n>     36  </q-n></a>      s = {s, $sformatf(<q-l>"data_nidles = %0d: \n"</q-l>, <q-w>this</q-w>.data_nidles)};
<a name="37"><q-n>     37  </q-n></a>      s = {s, $sformatf(<q-l>"pkt_nidles = %0d: \n"</q-l>, <q-w>this</q-w>.pkt_nidles)};
<a name="38"><q-n>     38  </q-n></a>      s = {s, $sformatf(<q-l>"rsp = %0d: \n"</q-l>, <q-w>this</q-w>.rsp)};
<a name="39"><q-n>     39  </q-n></a>      s = {s, $sformatf(<q-l>"=======================================\n"</q-l>)};
<a name="40"><q-n>     40  </q-n></a>      <q-w>return</q-w> s;
<a name="41"><q-n>     41  </q-n></a>    <q-w>endfunction</q-w>
<a name="42"><q-n>     42  </q-n></a>  <q-w>endclass</q-w>: chnl_trans
<a name="43"><q-n>     43  </q-n></a>  
<a name="44"><q-n>     44  </q-n></a>  <q-w>class</q-w> chnl_driver;
<a name="45"><q-n>     45  </q-n></a>    <q-w>local</q-w> <q-w>string</q-w> name;
<a name="46"><q-n>     46  </q-n></a>    <q-w>local</q-w> <q-w>virtual</q-w> chnl_intf intf;
<a name="47"><q-n>     47  </q-n></a>    mailbox #(chnl_trans) req_mb;
<a name="48"><q-n>     48  </q-n></a>    mailbox #(chnl_trans) rsp_mb;
<a name="49"><q-n>     49  </q-n></a>  
<a name="50"><q-n>     50  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"chnl_driver"</q-l>);
<a name="51"><q-n>     51  </q-n></a>      <q-w>this</q-w>.name = name;
<a name="52"><q-n>     52  </q-n></a>    <q-w>endfunction</q-w>
<a name="53"><q-n>     53  </q-n></a>  
<a name="54"><q-n>     54  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> set_interface(<q-w>virtual</q-w> chnl_intf intf);
<a name="55"><q-n>     55  </q-n></a>      <q-w>if</q-w>(intf == <q-w>null</q-w>)
<a name="56"><q-n>     56  </q-n></a>        $<q-v>error</q-w>(<q-l>"interface handle is NULL, please check if target interface has been intantiated"</q-l>);
<a name="57"><q-n>     57  </q-n></a>      <q-w>else</q-w>
<a name="58"><q-n>     58  </q-n></a>        <q-w>this</q-w>.intf = intf;
<a name="59"><q-n>     59  </q-n></a>    <q-w>endfunction</q-w>
<a name="60"><q-n>     60  </q-n></a>
<a name="61"><q-n>     61  </q-n></a>    <q-w>task</q-w> run();
<a name="62"><q-n>     62  </q-n></a>      <q-w>fork</q-w>
<a name="63"><q-n>     63  </q-n></a>       <q-w>this</q-w>.do_drive();
<a name="64"><q-n>     64  </q-n></a>       <q-w>this</q-w>.do_reset();
<a name="65"><q-n>     65  </q-n></a>      <q-w>join</q-w>
<a name="66"><q-n>     66  </q-n></a>    <q-w>endtask</q-w>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>    <q-w>task</q-w> do_reset();
<a name="69"><q-n>     69  </q-n></a>      <q-w>forever</q-w> <q-w>begin</q-w>
<a name="70"><q-n>     70  </q-n></a>        @(<q-a>negedge</q-w> intf.rstn);
<a name="71"><q-n>     71  </q-n></a>        intf.ch_valid &lt;= 0;
<a name="72"><q-n>     72  </q-n></a>        intf.ch_data &lt;= 0;
<a name="73"><q-n>     73  </q-n></a>      <q-w>end</q-w>
<a name="74"><q-n>     74  </q-n></a>    <q-w>endtask</q-w>
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a>    <q-w>task</q-w> do_drive();
<a name="77"><q-n>     77  </q-n></a>      chnl_trans req, rsp;
<a name="78"><q-n>     78  </q-n></a>      @(<q-a>posedge</q-w> intf.rstn);
<a name="79"><q-n>     79  </q-n></a>      <q-w>forever</q-w> <q-w>begin</q-w>
<a name="80"><q-n>     80  </q-n></a>        <q-w>this</q-w>.req_mb.get(req);
<a name="81"><q-n>     81  </q-n></a>        <q-w>this</q-w>.chnl_write(req);
<a name="82"><q-n>     82  </q-n></a>        rsp = req.clone();
<a name="83"><q-n>     83  </q-n></a>        rsp.rsp = 1;
<a name="84"><q-n>     84  </q-n></a>        <q-w>this</q-w>.rsp_mb.put(rsp);
<a name="85"><q-n>     85  </q-n></a>      <q-w>end</q-w>
<a name="86"><q-n>     86  </q-n></a>    <q-w>endtask</q-w>
<a name="87"><q-n>     87  </q-n></a>  
<a name="88"><q-n>     88  </q-n></a>    <q-w>task</q-w> chnl_write(<q-w>input</q-w> chnl_trans t);
<a name="89"><q-n>     89  </q-n></a>      <q-w>foreach</q-w>(t.data[i]) <q-w>begin</q-w>
<a name="90"><q-n>     90  </q-n></a>        @(<q-a>posedge</q-w> intf.clk);
<a name="91"><q-n>     91  </q-n></a>        intf.drv_ck.ch_valid &lt;= 1;
<a name="92"><q-n>     92  </q-n></a>        intf.drv_ck.ch_data &lt;= t.data[i];
<a name="93"><q-n>     93  </q-n></a>        @(<q-a>negedge</q-w> intf.clk);
<a name="94"><q-n>     94  </q-n></a>        <q-w>wait</q-w>(intf.ch_ready === 'b1);
<a name="95"><q-n>     95  </q-n></a>        $display(<q-l>"%0t channel driver [%s] sent data %x"</q-l>, $<q-w>time</q-w>, name, t.data[i]);
<a name="96"><q-n>     96  </q-n></a>        <q-w>repeat</q-w>(t.data_nidles) chnl_idle();
<a name="97"><q-n>     97  </q-n></a>      <q-w>end</q-w>
<a name="98"><q-n>     98  </q-n></a>      <q-w>repeat</q-w>(t.pkt_nidles) chnl_idle();
<a name="99"><q-n>     99  </q-n></a>    <q-w>endtask</q-w>
<a name="100"><q-n>     100  </q-n></a>    
<a name="101"><q-n>     101  </q-n></a>    <q-w>task</q-w> chnl_idle();
<a name="102"><q-n>     102  </q-n></a>      @(<q-a>posedge</q-w> intf.clk);
<a name="103"><q-n>     103  </q-n></a>      intf.drv_ck.ch_valid &lt;= 0;
<a name="104"><q-n>     104  </q-n></a>      intf.drv_ck.ch_data &lt;= 0;
<a name="105"><q-n>     105  </q-n></a>    <q-w>endtask</q-w>
<a name="106"><q-n>     106  </q-n></a>  <q-w>endclass</q-w>: chnl_driver
<a name="107"><q-n>     107  </q-n></a>  
<a name="108"><q-n>     108  </q-n></a>  <q-w>class</q-w> chnl_generator;
<a name="109"><q-n>     109  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> pkt_id = 0;
<a name="110"><q-n>     110  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> ch_id = -1;
<a name="111"><q-n>     111  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> data_nidles = -1;
<a name="112"><q-n>     112  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> pkt_nidles = -1;
<a name="113"><q-n>     113  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> data_size = -1;
<a name="114"><q-n>     114  </q-n></a>    <q-w>rand</q-w> <q-w>int</q-w> ntrans = 10;
<a name="115"><q-n>     115  </q-n></a>
<a name="116"><q-n>     116  </q-n></a>    mailbox #(chnl_trans) req_mb;
<a name="117"><q-n>     117  </q-n></a>    mailbox #(chnl_trans) rsp_mb;
<a name="118"><q-n>     118  </q-n></a>
<a name="119"><q-n>     119  </q-n></a>    <q-w>constraint</q-w> cstr{
<a name="120"><q-n>     120  </q-n></a>      soft ch_id == -1;
<a name="121"><q-n>     121  </q-n></a>      soft pkt_id == 0;
<a name="122"><q-n>     122  </q-n></a>      soft data_size == -1;
<a name="123"><q-n>     123  </q-n></a>      soft data_nidles == -1;
<a name="124"><q-n>     124  </q-n></a>      soft pkt_nidles == -1;
<a name="125"><q-n>     125  </q-n></a>      soft ntrans == 10;
<a name="126"><q-n>     126  </q-n></a>    }
<a name="127"><q-n>     127  </q-n></a>
<a name="128"><q-n>     128  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>();
<a name="129"><q-n>     129  </q-n></a>      <q-w>this</q-w>.req_mb = <q-w>new</q-w>();
<a name="130"><q-n>     130  </q-n></a>      <q-w>this</q-w>.rsp_mb = <q-w>new</q-w>();
<a name="131"><q-n>     131  </q-n></a>    <q-w>endfunction</q-w>
<a name="132"><q-n>     132  </q-n></a>
<a name="133"><q-n>     133  </q-n></a>    <q-w>task</q-w> start();
<a name="134"><q-n>     134  </q-n></a>      <q-w>repeat</q-w>(ntrans) send_trans();
<a name="135"><q-n>     135  </q-n></a>    <q-w>endtask</q-w>
<a name="136"><q-n>     136  </q-n></a>
<a name="137"><q-n>     137  </q-n></a>    <q-w>task</q-w> send_trans();
<a name="138"><q-n>     138  </q-n></a>      chnl_trans req, rsp;
<a name="139"><q-n>     139  </q-n></a>      req = <q-w>new</q-w>();
<a name="140"><q-n>     140  </q-n></a>      <q-w>assert</q-w>(req.randomize <q-w>with</q-w> {<q-w>local</q-w>::ch_id &gt;= 0 -&gt; ch_id == <q-w>local</q-w>::ch_id; 
<a name="141"><q-n>     141  </q-n></a>                                 <q-w>local</q-w>::pkt_id &gt;= 0 -&gt; pkt_id == <q-w>local</q-w>::pkt_id;
<a name="142"><q-n>     142  </q-n></a>                                 <q-w>local</q-w>::data_nidles &gt;= 0 -&gt; data_nidles == <q-w>local</q-w>::data_nidles;
<a name="143"><q-n>     143  </q-n></a>                                 <q-w>local</q-w>::pkt_nidles &gt;= 0 -&gt; pkt_nidles == <q-w>local</q-w>::pkt_nidles;
<a name="144"><q-n>     144  </q-n></a>                                 <q-w>local</q-w>::data_size &gt;0 -&gt; data.size() == <q-w>local</q-w>::data_size; 
<a name="145"><q-n>     145  </q-n></a>                               })
<a name="146"><q-n>     146  </q-n></a>        <q-w>else</q-w> $fatal(<q-l>"[RNDFAIL] channel packet randomization failure!"</q-l>);
<a name="147"><q-n>     147  </q-n></a>      <q-w>this</q-w>.pkt_id++;
<a name="148"><q-n>     148  </q-n></a>      $display(req.sprint());
<a name="149"><q-n>     149  </q-n></a>      <q-w>this</q-w>.req_mb.put(req);
<a name="150"><q-n>     150  </q-n></a>      <q-w>this</q-w>.rsp_mb.get(rsp);
<a name="151"><q-n>     151  </q-n></a>      $display(rsp.sprint());
<a name="152"><q-n>     152  </q-n></a>      <q-w>assert</q-w>(rsp.rsp)
<a name="153"><q-n>     153  </q-n></a>        <q-w>else</q-w> $<q-v>error</q-w>(<q-l>"[RSPERR] %0t error response received!"</q-l>, $<q-w>time</q-w>);
<a name="154"><q-n>     154  </q-n></a>    <q-w>endtask</q-w>
<a name="155"><q-n>     155  </q-n></a>
<a name="156"><q-n>     156  </q-n></a>    <q-w>function</q-w> <q-w>string</q-w> sprint();
<a name="157"><q-n>     157  </q-n></a>      <q-w>string</q-w> s;
<a name="158"><q-n>     158  </q-n></a>      s = {s, $sformatf(<q-l>"=======================================\n"</q-l>)};
<a name="159"><q-n>     159  </q-n></a>      s = {s, $sformatf(<q-l>"chnl_generator object content is as below: \n"</q-l>)};
<a name="160"><q-n>     160  </q-n></a>      s = {s, $sformatf(<q-l>"ntrans = %0d: \n"</q-l>, <q-w>this</q-w>.ntrans)};
<a name="161"><q-n>     161  </q-n></a>      s = {s, $sformatf(<q-l>"ch_id = %0d: \n"</q-l>, <q-w>this</q-w>.ch_id)};
<a name="162"><q-n>     162  </q-n></a>      s = {s, $sformatf(<q-l>"pkt_id = %0d: \n"</q-l>, <q-w>this</q-w>.pkt_id)};
<a name="163"><q-n>     163  </q-n></a>      s = {s, $sformatf(<q-l>"data_nidles = %0d: \n"</q-l>, <q-w>this</q-w>.data_nidles)};
<a name="164"><q-n>     164  </q-n></a>      s = {s, $sformatf(<q-l>"pkt_nidles = %0d: \n"</q-l>, <q-w>this</q-w>.pkt_nidles)};
<a name="165"><q-n>     165  </q-n></a>      s = {s, $sformatf(<q-l>"data_size = %0d: \n"</q-l>, <q-w>this</q-w>.data_size)};
<a name="166"><q-n>     166  </q-n></a>      s = {s, $sformatf(<q-l>"=======================================\n"</q-l>)};
<a name="167"><q-n>     167  </q-n></a>      <q-w>return</q-w> s;
<a name="168"><q-n>     168  </q-n></a>    <q-w>endfunction</q-w>
<a name="169"><q-n>     169  </q-n></a>
<a name="170"><q-n>     170  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> post_randomize();
<a name="171"><q-n>     171  </q-n></a>      <q-w>string</q-w> s;
<a name="172"><q-n>     172  </q-n></a>      s = {<q-l>"AFTER RANDOMIZATION \n"</q-l>, <q-w>this</q-w>.sprint()};
<a name="173"><q-n>     173  </q-n></a>      $display(s);
<a name="174"><q-n>     174  </q-n></a>    <q-w>endfunction</q-w>
<a name="175"><q-n>     175  </q-n></a>  <q-w>endclass</q-w>: chnl_generator
<a name="176"><q-n>     176  </q-n></a>
<a name="177"><q-n>     177  </q-n></a>  <q-w>typedef</q-w> <q-w>struct</q-w> <q-w>packed</q-w> {
<a name="178"><q-n>     178  </q-n></a>    <q-w>bit</q-w>[31:0] data;
<a name="179"><q-n>     179  </q-n></a>    <q-w>bit</q-w>[1:0] id;
<a name="180"><q-n>     180  </q-n></a>  } mon_data_t;
<a name="181"><q-n>     181  </q-n></a>
<a name="182"><q-n>     182  </q-n></a>  <q-w>class</q-w> chnl_monitor;
<a name="183"><q-n>     183  </q-n></a>    <q-w>local</q-w> <q-w>string</q-w> name;
<a name="184"><q-n>     184  </q-n></a>    <q-w>local</q-w> <q-w>virtual</q-w> chnl_intf intf;
<a name="185"><q-n>     185  </q-n></a>    mailbox #(mon_data_t) mon_mb;
<a name="186"><q-n>     186  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>"chnl_monitor"</q-l>);
<a name="187"><q-n>     187  </q-n></a>      <q-w>this</q-w>.name = name;
<a name="188"><q-n>     188  </q-n></a>    <q-w>endfunction</q-w>
<a name="189"><q-n>     189  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> set_interface(<q-w>virtual</q-w> chnl_intf intf);
<a name="190"><q-n>     190  </q-n></a>      <q-w>if</q-w>(intf == <q-w>null</q-w>)
<a name="191"><q-n>     191  </q-n></a>        $<q-v>error</q-w>(<q-l>"interface handle is NULL, please check if target interface has been intantiated"</q-l>);
<a name="192"><q-n>     192  </q-n></a>      <q-w>else</q-w>
<a name="193"><q-n>     193  </q-n></a>        <q-w>this</q-w>.intf = intf;
<a name="194"><q-n>     194  </q-n></a>    <q-w>endfunction</q-w>
<a name="195"><q-n>     195  </q-n></a>    <q-w>task</q-w> run();
<a name="196"><q-n>     196  </q-n></a>      <q-w>this</q-w>.mon_trans();
<a name="197"><q-n>     197  </q-n></a>    <q-w>endtask</q-w>
<a name="198"><q-n>     198  </q-n></a>
<a name="199"><q-n>     199  </q-n></a>    <q-w>task</q-w> mon_trans();
<a name="200"><q-n>     200  </q-n></a>      mon_data_t m;
<a name="201"><q-n>     201  </q-n></a>      <q-w>forever</q-w> <q-w>begin</q-w>
<a name="202"><q-n>     202  </q-n></a>        @(<q-a>posedge</q-w> intf.clk <q-w>iff</q-w> (intf.mon_ck.ch_valid==='b1 &amp;&amp; intf.mon_ck.ch_ready==='b1));
<a name="203"><q-n>     203  </q-n></a>        m.data = intf.mon_ck.ch_data;
<a name="204"><q-n>     204  </q-n></a>        mon_mb.put(m);
<a name="205"><q-n>     205  </q-n></a>        $display(<q-l>"%0t %s monitored channle data %8x"</q-l>, $<q-w>time</q-w>, <q-w>this</q-w>.name, m.data);
<a name="206"><q-n>     206  </q-n></a>      <q-w>end</q-w>
<a name="207"><q-n>     207  </q-n></a>    <q-w>endtask</q-w>
<a name="208"><q-n>     208  </q-n></a>  <q-w>endclass</q-w>
<a name="209"><q-n>     209  </q-n></a>  
<a name="210"><q-n>     210  </q-n></a>  <q-w>class</q-w> chnl_agent;
<a name="211"><q-n>     211  </q-n></a>    <q-w>local</q-w> <q-w>string</q-w> name;
<a name="212"><q-n>     212  </q-n></a>    chnl_driver driver;
<a name="213"><q-n>     213  </q-n></a>    chnl_monitor monitor;
<a name="214"><q-n>     214  </q-n></a>    <q-w>local</q-w> <q-w>virtual</q-w> chnl_intf vif;
<a name="215"><q-n>     215  </q-n></a>    <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"chnl_agent"</q-l>);
<a name="216"><q-n>     216  </q-n></a>      <q-w>this</q-w>.name = name;
<a name="217"><q-n>     217  </q-n></a>      <q-w>this</q-w>.driver = <q-w>new</q-w>({name, <q-l>".driver"</q-l>});
<a name="218"><q-n>     218  </q-n></a>      <q-w>this</q-w>.monitor = <q-w>new</q-w>({name, <q-l>".monitor"</q-l>});
<a name="219"><q-n>     219  </q-n></a>    <q-w>endfunction</q-w>
<a name="220"><q-n>     220  </q-n></a>
<a name="221"><q-n>     221  </q-n></a>    <q-w>function</q-w> <q-w>void</q-w> set_interface(<q-w>virtual</q-w> chnl_intf vif);
<a name="222"><q-n>     222  </q-n></a>      <q-w>this</q-w>.vif = vif;
<a name="223"><q-n>     223  </q-n></a>      driver.set_interface(vif);
<a name="224"><q-n>     224  </q-n></a>      monitor.set_interface(vif);
<a name="225"><q-n>     225  </q-n></a>    <q-w>endfunction</q-w>
<a name="226"><q-n>     226  </q-n></a>    <q-w>task</q-w> run();
<a name="227"><q-n>     227  </q-n></a>      <q-w>fork</q-w>
<a name="228"><q-n>     228  </q-n></a>        driver.run();
<a name="229"><q-n>     229  </q-n></a>        monitor.run();
<a name="230"><q-n>     230  </q-n></a>      <q-w>join</q-w>
<a name="231"><q-n>     231  </q-n></a>    <q-w>endtask</q-w>
<a name="232"><q-n>     232  </q-n></a>  <q-w>endclass</q-w>: chnl_agent
<a name="233"><q-n>     233  </q-n></a>
<a name="234"><q-n>     234  </q-n></a><q-w>endpackage</q-w>
<a name="235"><q-n>     235  </q-n></a>
</pre>
</tt>

  
</body>
</html>
